/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wellington.gerenciadorDeManobras.apresentacao;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;
import wellington.gerenciadorDeManobras.entidade.Categoria;
import wellington.gerenciadorDeManobras.entidade.Manobra;
import wellington.gerenciadorDeManobras.entidade.Relatorio;
import wellington.gerenciadorDeManobras.entidade.Usuario;
import wellington.gerenciadorDeManobras.excecao.GerenciadorException;
import wellington.gerenciadorDeManobras.excecao.NoSelectionException;
import wellington.gerenciadorDeManobras.negocio.CategoriaBO;
import wellington.gerenciadorDeManobras.negocio.ManobraBO;
import wellington.gerenciadorDeManobras.negocio.RelatorioBO;

/**
 *
 * @author were
 */
public class GerenciarManobrasTelaInicial extends javax.swing.JFrame {

    // private FormCadastroManobra formCadastroManobra;
    private FormCadastroManobra editarManobraForm;
    private GerenciarCategorias adicionarCategoriaForm;
    private GerenciarTreinos telaGerenciarTreinos;
    private GerenciarManobrasTelaInicial infoManobras;
    private GerenciarRequisitos gerenciarRequisitos;
    private List<Manobra> manobras;
    private List<Categoria> categorias;
    private Inicio inicio;
    private GerenciarDicas gerenciarDicas;
    private int idUsuario;

    /**
     * Creates new form InfoManobras
     */
    public GerenciarManobrasTelaInicial() throws SQLException {
        prepararTela();
    }

    GerenciarManobrasTelaInicial(Login loginUsuario, int idUsuario) throws SQLException {
        this.idUsuario = idUsuario;
        prepararTela();

    }

    GerenciarManobrasTelaInicial(int idUsuario) throws SQLException {
        this.idUsuario = idUsuario;
        prepararTela();
    }

    public void prepararTela() throws SQLException {
        try {
            this.initComponents();
            this.carregarTabelaDeManobras(idUsuario);
        } catch (Exception e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Manobras cadastrados", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        }
    }

    @Override
    public void setVisible(boolean exibir) {
        super.setVisible(exibir);
        if (exibir == true) {
            try {
                this.carregarTabelaDeManobras(idUsuario);
            } catch (SQLException ex) {
                Logger.getLogger(FormCadastroManobra.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaManobras = new javax.swing.JTable();
        btnNovaManobra1 = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        btnExcluirManobra = new javax.swing.JButton();
        btnEditarManobra = new javax.swing.JButton();
        btnTreinos = new javax.swing.JButton();
        lblDica = new javax.swing.JLabel();
        btnMaisTreinadas = new javax.swing.JButton();
        barraDeMenuPrincipal = new javax.swing.JMenuBar();
        menuOpçoes = new javax.swing.JMenu();
        itemMenuRequisitos = new javax.swing.JMenuItem();
        mnuItemNovaCategoria = new javax.swing.JMenuItem();
        mnuItemRelatorio = new javax.swing.JMenuItem();
        mnuItemDicas = new javax.swing.JMenuItem();
        itemMenuSair = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manobras");
        setExtendedState(6);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manobras", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18))); // NOI18N

        tabelaManobras.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabelaManobras);

        btnNovaManobra1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/add182.png"))); // NOI18N
        btnNovaManobra1.setText("Nova Manobra");
        btnNovaManobra1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaManobra1ActionPerformed(evt);
            }
        });

        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/direction237.png"))); // NOI18N
        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        btnExcluirManobra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete81.png"))); // NOI18N
        btnExcluirManobra.setText("Excluir");
        btnExcluirManobra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirManobraActionPerformed(evt);
            }
        });

        btnEditarManobra.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/pencil43.png"))); // NOI18N
        btnEditarManobra.setText("Editar");
        btnEditarManobra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarManobraActionPerformed(evt);
            }
        });

        btnTreinos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/bicycles.png"))); // NOI18N
        btnTreinos.setText("Treinos");
        btnTreinos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTreinosActionPerformed(evt);
            }
        });

        lblDica.setText("Ao usar o sistema pela 1ª vez, antes de adicionar uma manobra  insira as categorias as quais elas vão pertencer!!");

        btnMaisTreinadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/certification.png"))); // NOI18N
        btnMaisTreinadas.setText("Mais Treinadas ");
        btnMaisTreinadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaisTreinadasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblDica, javax.swing.GroupLayout.PREFERRED_SIZE, 559, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNovaManobra1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnEditarManobra, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnTreinos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnMaisTreinadas, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnExcluirManobra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                        .addComponent(btnSair))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovaManobra1)
                    .addComponent(btnEditarManobra)
                    .addComponent(btnTreinos)
                    .addComponent(btnMaisTreinadas)
                    .addComponent(btnExcluirManobra)
                    .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 325, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblDica))
        );

        menuOpçoes.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/menu62 (1).png"))); // NOI18N
        menuOpçoes.setText("Opções");

        itemMenuRequisitos.setText("Requisitos de manobras");
        itemMenuRequisitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuRequisitosActionPerformed(evt);
            }
        });
        menuOpçoes.add(itemMenuRequisitos);

        mnuItemNovaCategoria.setText("Categoria");
        mnuItemNovaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemNovaCategoriaActionPerformed(evt);
            }
        });
        menuOpçoes.add(mnuItemNovaCategoria);

        mnuItemRelatorio.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        mnuItemRelatorio.setText("Relatórios");
        menuOpçoes.add(mnuItemRelatorio);

        mnuItemDicas.setText("Dicas de manobras");
        mnuItemDicas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuItemDicasActionPerformed(evt);
            }
        });
        menuOpçoes.add(mnuItemDicas);

        itemMenuSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        itemMenuSair.setText("Sair");
        itemMenuSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemMenuSairActionPerformed(evt);
            }
        });
        menuOpçoes.add(itemMenuSair);

        barraDeMenuPrincipal.add(menuOpçoes);

        setJMenuBar(barraDeMenuPrincipal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1014, 539));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void itemMenuSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuSairActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_itemMenuSairActionPerformed

    private void mnuItemNovaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemNovaCategoriaActionPerformed
        try {
            // TODO add your handling code here:
            this.carregarFormCadastroCategoria();
        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_mnuItemNovaCategoriaActionPerformed

    private void itemMenuRequisitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemMenuRequisitosActionPerformed
        try {
            this.carregarTelaGerenciarRequisitos();
        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_itemMenuRequisitosActionPerformed

    private void mnuItemDicasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuItemDicasActionPerformed
        if (this.gerenciarDicas == null) {
            try {
                this.gerenciarDicas = new GerenciarDicas(this, idUsuario);
            } catch (SQLException ex) {
                Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.gerenciarDicas.setVisible(true);
        this.gerenciarDicas.toFront();
    }//GEN-LAST:event_mnuItemDicasActionPerformed

    private void btnTreinosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTreinosActionPerformed
        try {
            this.carregarFomrNovoTreino();
        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnTreinosActionPerformed

    private void btnEditarManobraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarManobraActionPerformed
        try {

            this.editarManobra();
            this.editarManobraForm.setVerificaEditarOuSalvar(1);

        } catch (NoSelectionException n) {
            String mensagen = "Selecione uma manobra antes!\n" + n.getMessage();
            JOptionPane.showMessageDialog(this, mensagen, "Editar Manobra", JOptionPane.ERROR_MESSAGE);

        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnEditarManobraActionPerformed

    private void btnExcluirManobraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirManobraActionPerformed
        this.excluirManobra();
    }//GEN-LAST:event_btnExcluirManobraActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        try {
            this.logOut();
        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnNovaManobra1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaManobra1ActionPerformed
        try {
            // TODO add your handling code here:
            this.carregarFormCadastroManobra();

        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNovaManobra1ActionPerformed

    private void btnMaisTreinadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaisTreinadasActionPerformed
        try {
            this.gerarRelatorioTotaltreinos();
        } catch (SQLException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnMaisTreinadasActionPerformed

    private void carregarFormCadastroCategoria() throws SQLException {
        if (adicionarCategoriaForm == null) {
            adicionarCategoriaForm = new GerenciarCategorias();
        }
        adicionarCategoriaForm.setVisible(true);
        adicionarCategoriaForm.toFront();
    }

    private void carregarFomrNovoTreino() throws SQLException {
        if (telaGerenciarTreinos == null) {
            this.telaGerenciarTreinos = new GerenciarTreinos(idUsuario);
        }
        telaGerenciarTreinos.setVisible(true);
        telaGerenciarTreinos.toFront();
    }

    private void carregarFormCadastroManobra() throws SQLException, ParseException {
        if (editarManobraForm == null) {
            editarManobraForm = new FormCadastroManobra(this, idUsuario);
        }
        editarManobraForm.setVisible(true);
        editarManobraForm.toFront();

    }

    public void carregarTabelaDeManobras(int idUsuario) throws SQLException {
        ManobraBO manobrasBO = new ManobraBO();
        this.manobras = manobrasBO.buscarTodasManobras(idUsuario);
        ModeloTabelaManobras modelo = new ModeloTabelaManobras();
        tabelaManobras.setModel(modelo);
    }

    public void carregarTelaGerenciarRequisitos() throws SQLException {
        if (gerenciarRequisitos == null) {
            gerenciarRequisitos = new GerenciarRequisitos(idUsuario);
        }
        gerenciarRequisitos.setVisible(true);
        gerenciarRequisitos.toFront();

    }

    public void excluirManobra() {
        try {
            int linhaSelecionada = tabelaManobras.getSelectedRow();
            if (linhaSelecionada != -1) {
                Manobra manobraSelecionado = manobras.get(linhaSelecionada);

                int resposta;
                String mensagem = "Desseja excluir manobra? " + manobraSelecionado.getNome();
                String titulo = "Exclusão de manobra";
                resposta = JOptionPane.showConfirmDialog(this, mensagem, titulo, JOptionPane.YES_NO_OPTION);

                if (resposta == JOptionPane.YES_NO_OPTION) {
                    ManobraBO manobraBO = new ManobraBO();
                    manobraBO.removerManobra(manobraSelecionado.getId());
                    mensagem = "Manobra " + manobraSelecionado.getNome() + " Id: " + manobraSelecionado.getId() + " excluída com sucesso!";
                    JOptionPane.showMessageDialog(this, mensagem, "Exclusão de Manobra", JOptionPane.INFORMATION_MESSAGE);
                    this.carregarTabelaDeManobras(idUsuario);
                }

            } else {
                String mensagem = "Selencione uma manobra antes.";
                JOptionPane.showMessageDialog(this, mensagem, "Exclusão de manobra", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (GerenciadorException g) {
            String mensagem = "Erro inesperado!Observe a seguinte mensagem de erro:";
            mensagem += g.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Exclusão de manobra ", JOptionPane.ERROR_MESSAGE);
            //this.dispose();
        } catch (SQLException s) {
            String mensagem = "Você está tentando excluir uma manobra que está em treinamento. Apague o treino dela e tente novamente!";
            mensagem += s.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Exclusão de manobra ", JOptionPane.ERROR_MESSAGE);

        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GerenciarManobrasTelaInicial().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraDeMenuPrincipal;
    private javax.swing.JButton btnEditarManobra;
    private javax.swing.JButton btnExcluirManobra;
    private javax.swing.JButton btnMaisTreinadas;
    private javax.swing.JButton btnNovaManobra1;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnTreinos;
    private javax.swing.JMenuItem itemMenuRequisitos;
    private javax.swing.JMenuItem itemMenuSair;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDica;
    private javax.swing.JMenu menuOpçoes;
    private javax.swing.JMenuItem mnuItemDicas;
    private javax.swing.JMenuItem mnuItemNovaCategoria;
    private javax.swing.JMenuItem mnuItemRelatorio;
    private javax.swing.JTable tabelaManobras;
    // End of variables declaration//GEN-END:variables

    private void editarManobra() throws SQLException, ParseException {
        int linhaSelecionada = tabelaManobras.getSelectedRow();
        if (linhaSelecionada != -1) {
            Manobra manobraSelecionado = manobras.get(linhaSelecionada);
            if (editarManobraForm != null) {
                editarManobraForm.dispose();
            }
            editarManobraForm = new FormCadastroManobra(this, manobraSelecionado);
            editarManobraForm.setVisible(true);
        } else {
            throw new NoSelectionException();
        }

    }

    private void logOut() throws SQLException {
        if (this.inicio == null) {
            this.inicio = new Inicio();
        }
        this.inicio.setVisible(true);
        this.dispose();
        this.inicio.toFront();
    }

    //classe interna
    private class ModeloTabelaManobras extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "Nome";
            } else if (coluna == 1) {
                return "Dificuldade";
            } else if (coluna == 2) {
                return "Status";
            } else {
                return "Categoria";
            }
        }

        @Override
        public int getRowCount() {
            return manobras.size();
        }

        @Override
        public int getColumnCount() {
            return 4;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Manobra m = manobras.get(rowIndex);
            if (columnIndex == 0) {
                return m.getNome();
            } else if (columnIndex == 1) {

                if (m.getDificuldade() == 0) {
                    return "simples";
                } else if (m.getDificuldade() == 1) {
                    return "facil";
                } else if (m.getDificuldade() == 2) {
                    return "mediana";
                } else if (m.getDificuldade() == 3) {
                    return "difícil";
                }
                return null;

            } else if (columnIndex == 2) {
                if (m.getStatus() < 100) {
                    return "Não sabe fazer ainda";
                } else {
                    return "100%";
                }

            } else {
                if (columnIndex == 3) {
                    try {
                        CategoriaBO categoriaBO = new CategoriaBO();
                        categorias = categoriaBO.buscarTodasCategorias();
                        for (Categoria c : categorias) {
                            if (c.getId() == m.getCategoria()) {
                                return c.getNome();
                            }
                        }

                    } catch (SQLException ex) {
                        Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                return null;
            }

        }

    }

    private void gerarRelatorioTotaltreinos() throws SQLException {
        RelatorioBO r = new RelatorioBO();
        List<Relatorio> listaTotalTreinos = r.recuperarTotalManobrasTotalTreinos();

        try {
            String arquivoRelatorio = System.getProperty("user.dir")
                    + "/relatorios/TotalTreinoManobras.jasper";

            Map<String, Object> parametros = new HashMap<String, Object>();

            JRBeanCollectionDataSource fonteDados = new JRBeanCollectionDataSource(listaTotalTreinos);

            JasperPrint relatorioGerado = JasperFillManager.fillReport(arquivoRelatorio, parametros, fonteDados);

            JasperViewer telaExibicaoRelatorio = new JasperViewer(relatorioGerado, false);
            telaExibicaoRelatorio.setTitle("Relatorio Quantidade de dias treinando cada manobra");
            telaExibicaoRelatorio.setVisible(true);
        } catch (JRException ex) {
            //JOptionPane.showMessageDialog(this, "Erro ao exibir relatório.","Erro",JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);

        }

    }

}

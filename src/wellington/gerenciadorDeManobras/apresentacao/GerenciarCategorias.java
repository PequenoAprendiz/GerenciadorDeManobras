/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package wellington.gerenciadorDeManobras.apresentacao;

import java.sql.SQLException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;
import wellington.gerenciadorDeManobras.entidade.Categoria;
import wellington.gerenciadorDeManobras.excecao.CampoObrigatorioException;
import wellington.gerenciadorDeManobras.excecao.NoSelectionException;

import wellington.gerenciadorDeManobras.negocio.CategoriaBO;

/**
 *
 * @author were
 */
public class GerenciarCategorias extends javax.swing.JFrame {

    private FormCadastrarEditarCategoria editarCategoriaForm;
    private FormCadastrarEditarCategoria formCadastrarEditarCategoria;
    private GerenciarCategorias gerenciarCategorias;
    private List<Categoria> categorias;

    /**
     * Creates new form AdicionarCategoriaForm
     */
    public GerenciarCategorias() throws SQLException {
        prepararTela();
    }

    public void prepararTela() throws SQLException {       
        try{
         this.initComponents();
        this.carregarTabelaDeCategorias();  
        } catch (Exception e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Categorias de manobras cadastradas", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        }
           
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        painelListaCategorias = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaCategorias = new javax.swing.JTable();
        btnAlterarCategoria = new javax.swing.JButton();
        btnExcluirCategoria = new javax.swing.JButton();
        btnNovaCategoria = new javax.swing.JButton();
        btnFecharTela = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciar Categorias");
        setExtendedState(6);
        setResizable(false);

        painelListaCategorias.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Categorias", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 18))); // NOI18N

        tabelaCategorias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tabelaCategorias);

        btnAlterarCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/pencil43.png"))); // NOI18N
        btnAlterarCategoria.setText("Editar");
        btnAlterarCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarCategoriaActionPerformed(evt);
            }
        });

        btnExcluirCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/delete81.png"))); // NOI18N
        btnExcluirCategoria.setText("Excluir");
        btnExcluirCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirCategoriaActionPerformed(evt);
            }
        });

        btnNovaCategoria.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/add182.png"))); // NOI18N
        btnNovaCategoria.setText("Nova");
        btnNovaCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaCategoriaActionPerformed(evt);
            }
        });

        btnFecharTela.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/back57.png"))); // NOI18N
        btnFecharTela.setText("Voltar");
        btnFecharTela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharTelaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout painelListaCategoriasLayout = new javax.swing.GroupLayout(painelListaCategorias);
        painelListaCategorias.setLayout(painelListaCategoriasLayout);
        painelListaCategoriasLayout.setHorizontalGroup(
            painelListaCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelListaCategoriasLayout.createSequentialGroup()
                .addContainerGap(221, Short.MAX_VALUE)
                .addComponent(btnNovaCategoria)
                .addGap(18, 18, 18)
                .addComponent(btnAlterarCategoria)
                .addGap(18, 18, 18)
                .addComponent(btnExcluirCategoria)
                .addGap(11, 11, 11)
                .addComponent(btnFecharTela)
                .addContainerGap())
            .addGroup(painelListaCategoriasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
        );
        painelListaCategoriasLayout.setVerticalGroup(
            painelListaCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelListaCategoriasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, Short.MAX_VALUE)
                .addGroup(painelListaCategoriasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluirCategoria)
                    .addComponent(btnAlterarCategoria)
                    .addComponent(btnNovaCategoria)
                    .addComponent(btnFecharTela)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelListaCategorias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(painelListaCategorias, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(840, 500));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAlterarCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarCategoriaActionPerformed
        try {
            this.editarCategoria();
            this.editarCategoriaForm.setVerificaEditarOuSalvar(1);
        } catch (ParseException | SQLException ex) {
            Logger.getLogger(GerenciarCategorias.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnAlterarCategoriaActionPerformed

    private void btnExcluirCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirCategoriaActionPerformed
        this.excluirCategoria();
    }//GEN-LAST:event_btnExcluirCategoriaActionPerformed

    private void btnNovaCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaCategoriaActionPerformed
        try {
            this.carregarFormCadastroCategoria();
        } catch (SQLException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(GerenciarManobrasTelaInicial.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnNovaCategoriaActionPerformed

    private void btnFecharTelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharTelaActionPerformed
        
        this.dispose();
    }//GEN-LAST:event_btnFecharTelaActionPerformed

    private void carregarFormCadastroCategoria() throws SQLException, ParseException {
        if (formCadastrarEditarCategoria == null) {
            formCadastrarEditarCategoria = new FormCadastrarEditarCategoria(this);
        }
        formCadastrarEditarCategoria.setVisible(true);
        formCadastrarEditarCategoria.toFront();
    }

    @Override
    public void setVisible(boolean exibir) {
        super.setVisible(exibir);
        if (exibir == true) {
            try {
                this.carregarTabelaDeCategorias();
            } catch (SQLException ex) {
                Logger.getLogger(FormCadastroManobra.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void carregarTabelaDeCategorias() throws SQLException {
        CategoriaBO categoriaBO = new CategoriaBO();
        this.categorias = categoriaBO.buscarTodasCategorias();
        ModeloTabelaCategorias modelo = new ModeloTabelaCategorias();
        tabelaCategorias.setModel(modelo);
    }

    public void excluirCategoria(){
        try {
            int linhaSelecionada = tabelaCategorias.getSelectedRow();
            if (linhaSelecionada != -1) {
                Categoria categoriaSelecionado = categorias.get(linhaSelecionada);

                int resposta;
                String mensagem = "Desseja excluir categoria? " + categoriaSelecionado.getNome();
                String titulo = "Exclusão de categoria";
                resposta = JOptionPane.showConfirmDialog(this, mensagem, titulo, JOptionPane.YES_NO_OPTION);

                if (resposta == JOptionPane.YES_NO_OPTION) {
                    CategoriaBO categoriaBO = new CategoriaBO();
                    categoriaBO.removerManobra(categoriaSelecionado.getId());
                    mensagem = "Categoria " + categoriaSelecionado.getNome() + " Id: " + categoriaSelecionado.getId() + " excluída com sucesso!";
                    JOptionPane.showMessageDialog(this, mensagem, "Exclusão de categoria", JOptionPane.INFORMATION_MESSAGE);
                    this.carregarTabelaDeCategorias();
                }
            } else {
                String mensagem = "Selecione uma categoria antes!";
                JOptionPane.showMessageDialog(this, mensagem, "Exclusão de categoria", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception e) {
            String mensagem = "Erro inesperado! Informe a mensagem de erro ao administrador do sistema.";
            mensagem += "\nMensagem de erro:\n" + e.getMessage();
            JOptionPane.showMessageDialog(this, mensagem, "Exclusão de categoria ", JOptionPane.ERROR_MESSAGE);
            this.dispose();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterarCategoria;
    private javax.swing.JButton btnExcluirCategoria;
    private javax.swing.JButton btnFecharTela;
    private javax.swing.JButton btnNovaCategoria;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel painelListaCategorias;
    private javax.swing.JTable tabelaCategorias;
    // End of variables declaration//GEN-END:variables

    private void editarCategoria() throws SQLException, ParseException {
        int linhaSelecionada = tabelaCategorias.getSelectedRow();
        if (linhaSelecionada != -1) {
            Categoria categoriaSelecionado = categorias.get(linhaSelecionada);
            if (editarCategoriaForm != null) {
                editarCategoriaForm.dispose();
            }
            editarCategoriaForm = new FormCadastrarEditarCategoria(this, categoriaSelecionado);
            editarCategoriaForm.setVisible(true);
        } else {
            throw new NoSelectionException();
        }
    }

    //classe interna
    private class ModeloTabelaCategorias extends AbstractTableModel {

        @Override
        public String getColumnName(int coluna) {
            if (coluna == 0) {
                return "Categoria";
            } else {
                return "Descrição";
            }           
        }
        
        @Override
        public int getRowCount() {
            return categorias.size();
        }
        
        @Override
        public int getColumnCount() {
            return 2;
        }
        
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Categoria c = categorias.get(rowIndex);
            if (columnIndex == 0) {
                return c.getNome();
            } else {
                return c.getDescricao();
            }
            
        }

    }
}
